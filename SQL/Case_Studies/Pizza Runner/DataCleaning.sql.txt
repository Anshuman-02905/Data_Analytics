-- Step 1: Create Schema
CREATE SCHEMA pizza_runner;

-- Step 2: Create and Populate the Runners Table
DROP TABLE IF EXISTS pizza_runner.runners;
CREATE TABLE pizza_runner.runners (
  runner_id INTEGER,
  registration_date DATE
);

INSERT INTO pizza_runner.runners
  (runner_id, registration_date)
VALUES
  (1, '2021-01-01'),
  (2, '2021-01-03'),
  (3, '2021-01-08'),
  (4, '2021-01-15');

-- Step 3: Create and Populate the Customer Orders Table
DROP TABLE IF EXISTS pizza_runner.customer_orders;
CREATE TABLE pizza_runner.customer_orders (
  order_id INTEGER,
  customer_id INTEGER,
  pizza_id INTEGER,
  exclusions VARCHAR(4),
  extras VARCHAR(4),
  order_time TIMESTAMP
);

INSERT INTO pizza_runner.customer_orders
  (order_id, customer_id, pizza_id, exclusions, extras, order_time)
VALUES
  (1, 101, 1, '', '', '2020-01-01 18:05:02'),
  (2, 101, 1, '', '', '2020-01-01 19:00:52'),
  (3, 102, 1, '', '', '2020-01-02 23:51:23'),
  (3, 102, 2, '', NULL, '2020-01-02 23:51:23'),
  (4, 103, 1, '4', '', '2020-01-04 13:23:46'),
  (4, 103, 1, '4', '', '2020-01-04 13:23:46'),
  (4, 103, 2, '4', '', '2020-01-04 13:23:46'),
  (5, 104, 1, 'null', '1', '2020-01-08 21:00:29'),
  (6, 101, 2, 'null', 'null', '2020-01-08 21:03:13'),
  (7, 105, 2, 'null', '1', '2020-01-08 21:20:29'),
  (8, 102, 1, 'null', 'null', '2020-01-09 23:54:33'),
  (9, 103, 1, '4', '1, 5', '2020-01-10 11:22:59'),
  (10, 104, 1, 'null', 'null', '2020-01-11 18:34:49'),
  (10, 104, 1, '2, 6', '1, 4', '2020-01-11 18:34:49');

-- Step 4: Create and Populate the Runner Orders Table
DROP TABLE IF EXISTS pizza_runner.runner_orders;
CREATE TABLE pizza_runner.runner_orders (
  order_id INTEGER,
  runner_id INTEGER,
  pickup_time VARCHAR(19),
  distance VARCHAR(7),
  duration VARCHAR(10),
  cancellation VARCHAR(23)
);

INSERT INTO pizza_runner.runner_orders
  (order_id, runner_id, pickup_time, distance, duration, cancellation)
VALUES
  (1, 1, '2020-01-01 18:15:34', '20km', '32 minutes', ''),
  (2, 1, '2020-01-01 19:10:54', '20km', '27 minutes', ''),
  (3, 1, '2020-01-03 00:12:37', '13.4km', '20 mins', NULL),
  (4, 2, '2020-01-04 13:53:03', '23.4', '40', NULL),
  (5, 3, '2020-01-08 21:10:57', '10', '15', NULL),
  (6, 3, NULL, NULL, NULL, 'Restaurant Cancellation'),
  (7, 2, '2020-01-08 21:30:45', '25km', '25mins', NULL),
  (8, 2, '2020-01-10 00:15:02', '23.4 km', '15 minute', NULL),
  (9, 2, NULL, NULL, NULL, 'Customer Cancellation'),
  (10, 1, '2020-01-11 18:50:20', '10km', '10minutes', NULL);

-- Step 5: Create and Populate the Pizza Names Table
DROP TABLE IF EXISTS pizza_runner.pizza_names;
CREATE TABLE pizza_runner.pizza_names (
  pizza_id INTEGER,
  pizza_name TEXT
);

INSERT INTO pizza_runner.pizza_names
  (pizza_id, pizza_name)
VALUES
  (1, 'Meatlovers'),
  (2, 'Vegetarian');

-- Step 6: Create and Populate the Pizza Recipes Table
DROP TABLE IF EXISTS pizza_runner.pizza_recipes;
CREATE TABLE pizza_runner.pizza_recipes (
  pizza_id INTEGER,
  toppings TEXT
);

INSERT INTO pizza_runner.pizza_recipes
  (pizza_id, toppings)
VALUES
  (1, '1, 2, 3, 4, 5, 6, 8, 10'),
  (2, '4, 6, 7, 9, 11, 12');

-- Step 7: Create and Populate the Pizza Toppings Table
DROP TABLE IF EXISTS pizza_runner.pizza_toppings;
CREATE TABLE pizza_runner.pizza_toppings (
  topping_id INTEGER,
  topping_name TEXT
);

INSERT INTO pizza_runner.pizza_toppings
  (topping_id, topping_name)
VALUES
  (1, 'Bacon'),
  (2, 'BBQ Sauce'),
  (3, 'Beef'),
  (4, 'Cheese'),
  (5, 'Chicken'),
  (6, 'Mushrooms'),
  (7, 'Onions'),
  (8, 'Pepperoni'),
  (9, 'Peppers'),
  (10, 'Salami'),
  (11, 'Tomatoes'),
  (12, 'Tomato Sauce');

-- Step 8: Data Cleaning - Customer Orders
CREATE TEMPORARY TABLE pizza_runner.cust_orders AS
SELECT
  order_id,
  customer_id, 
  pizza_id, 
  CASE
    WHEN exclusions = '' THEN NULL
    WHEN exclusions = 'null' THEN NULL
    ELSE exclusions
  END AS exclusions_cleaned,
  CASE
    WHEN extras = '' THEN NULL
    WHEN extras = 'NaN' THEN NULL
    ELSE extras
  END AS extras_cleaned,
  order_time
FROM pizza_runner.customer_orders;

-- Step 9: Data Cleaning - Runner Orders
CREATE TEMPORARY TABLE pizza_runner.runner_orders_pre AS
SELECT
  order_id,
  runner_id,
  CASE
    WHEN pickup_time = 'null' THEN NULL
    ELSE pickup_time
  END AS pickup_time_cleaned,
  CASE
    WHEN distance IS NOT NULL THEN REPLACE(REPLACE(distance, 'km', ''), ' ', '')
  END AS distance_cleaned,
  CASE
    WHEN duration IS NOT NULL THEN REPLACE(REPLACE(duration, 'mins', ''), 'minute', '1')
  END AS duration_cleaned,
  CASE
    WHEN cancellation = '' THEN NULL
    WHEN cancellation = 'null' THEN NULL
    ELSE cancellation
  END AS cancellation_cleaned
FROM pizza_runner.runner_orders;


